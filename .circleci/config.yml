# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  slack: circleci/slack@4.4.2

# Orchestrate or schedule a set of jobs
commands:
  print_pipeline_id:
    description: "A very simple command for showing pipeline ID"
    parameters:
      id:
        type: string
    steps:
      - run: << parameters.id >>  
jobs:
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "cenas e cenas" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
      - slack/notify:
          event: pass
          template: basic_success_1
      - slack/notify:
          event: fail
          template: basic_fail_1

  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
      - slack/notify:
          event: pass
          template: basic_success_1
      - slack/notify:
          event: fail
          template: basic_fail_1

  return_fail:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: 
          name: echo Return 1
          command: return 1
      - run:
          name: Handlilng Return 1
          command: echo "Hello Error!"
          when: on_fail
      - slack/notify:
          event: pass
          template: basic_success_1
      - slack/notify:
          event: fail
          template: basic_fail_1
  print_pipeline:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id:
          id: echo << pipeline.id >>
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name lgsg-stack \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
      - run:
          name: Get Public IP's
          command:  |
            aws ec2 describe-instances \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --filters "Name=tag:project,Values=udacity" \
             --output text >> inventory.txt
             
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [33:3b:39:fa:96:c7:fc:80:a1:82:88:89:3f:9f:48:3e]
      - run:
          name: Install Dependencies
          command:
            apk add --update ansible 
      - run:
          name: Configure Server
          command:
            ansible-playbook -i inventory.txt ansible/playbook.yml


workflows:
  # Name the workflow "welcome"
    my_workflow:
      # Run the welcome/run job in its own containerr
      jobs:
        # - save_hello_world_output:
        #    context: 
        #     - slack-secrets
        # - print_output_file:
        #    context: 
        #     - slack-secrets
        #    requires:
        #     - save_hello_world_output
        # - print_pipeline
        # - return_fail:
        #     context: 
        #     - slack-secrets
        #     requires:
        #     - print_output_file
        - create_infrastructure
        - configure-infrastructure:
            requires: 
              - create_infrastructure
            filters:
              branches:
                only: main
            


        


